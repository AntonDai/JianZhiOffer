import java.util.HashSet;
import java.util.Set;

/**
 * @description: 检查数独的有效性
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * 数独部分空格内已填入了数字，空白格用 '.' 表示
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * @author: Daniel
 * @create: 2019-03-12-22-27
 **/
public class ValidSudoku {

    public static boolean isValidSudoku(String[][] board) {
        for(int i=0; i<9; i++) {
            // 检查行是否有效
            if(!isParticallyValid(board,i,0,i,8)) // 以(00,08)表示0行0列到0行8列 ==> (10,18) (20,28) (30,38)  ... (80,88)
                return false;
            // 检查列是否有效
            if(!isParticallyValid(board,0,i,8,i)) // (00,80)表示0行0列到8行0列 ==> (01,81) (02,82) ... (08,88)
                return false;
        }
        // 检查3*3的块是否有效
        for(int i=0; i<3; i++) {
            for(int j=0; j<3; j++) {
                if(!isParticallyValid(board,i*3,j*3,i*3+2,j*3+2)) // (00,22) (03,25) (06,28) ==> (30,52) (33,55) (36,58)
                    return false;
            }
        }
        return true;
    }

    // 检查部分是否有效, 想象成一个矩阵，输入矩阵的左上角坐标和右下角坐标就能唯一确定一个矩阵
    private static boolean isParticallyValid(String[][] board, int x1, int y1, int x2, int y2) {
        Set<String> set = new HashSet<>();
        for(int i=x1; i<=x2; i++) {
            for(int j=y1; j<=y2; j++) {
                String s = board[i][j];
                if(!s.equals("."))
                    if(!set.add(s))
                        return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        test1();
    }

    public static void test1() {
        String[][] board = {
                {"5", "3", ".", ".", "7", ".", ".", ".", "."},
                {"6", ".", ".", "1", "9", "5", ".", ".", "."},
                {".", "9", "8", ".", ".", ".", ".", "6", "."},
                {"8", ".", ".", ".", "6", ".", ".", ".", "3"},
                {"4", ".", ".", "8", ".", "3", ".", ".", "1"},
                {"7", ".", ".", ".", "2", ".", ".", ".", "6"},
                {".", "6", ".", ".", ".", ".", "2", "8", "."},
                {".", ".", ".", "4", "1", "9", ".", ".", "5"},
                {".", ".", ".", ".", "8", ".", ".", "7", "9"}
            };
        System.out.println(isValidSudoku(board)); // true
    }

}
